type User {
  id: ObjectID!
  user_type: String!
  username: String!
  display_name: String!
  created_at: Time!
  avatar_url: String!
  biography: String!
  tag_color: Int!
  editors: [UserEditor!]!

  roles: [Role]!
  owned_emotes: [Emote!]! @goField(forceResolver: true)
  connections: [UserConnection]!

  inbox_unread_count: Int! @goField(forceResolver: true) @hasPermissions

  reports: [Report!]!
    @goField(forceResolver: true)
    @hasPermissions(role: [ManageReports])
}

type UserEditor {
  user: User! @goField(forceResolver: true)
  connections: [String!]!
  permissions: Int!
  visible: Boolean!
  added_at: Time!
}

type UserEmote {
  emote: Emote! @goField(forceResolver: true)
  connections: [String!]!
  alias: String
  added_at: Time!
}

type UserConnection {
  id: String!
  display_name: String!
  platform: String!
  linked_at: Time!
}

extend type Query {
  user(id: ObjectID): User!
  users(query: String!): [User]!
}

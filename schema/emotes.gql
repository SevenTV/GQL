type Emote {
  id: ObjectID!
  name: String!
  flags: Int!
  status: Int!
  tags: [String!]!
  animated: Boolean!
  created_at: Time!

  owner_id: ObjectID!
  owner: User!

  channels(limit: Int, after_id: String!): [User!]!
    @goField(forceResolver: true)
  channel_count: Int! @goField(forceResolver: true)

  urls(format: ImageFormat): [String!]! @goField(forceResolver: true)

  reports: [Report!]!
    @goField(forceResolver: true)
    @hasPermissions(role: [MANAGE_REPORTS])
}

extend type Query {
  emote(id: ObjectID!): Emote
  emotes(
    query: String!
    page: Int
    limit: Int
    filter: EmoteSearchFilter
    sort: Sort
  ): EmoteSearchResult!
}

input EmoteSearchFilter {
  category: EmoteSearchCategory
  case_sensitive: Boolean
  exact_match: Boolean
}

enum EmoteSearchCategory {
  ALL
  GLOBAL
  TRENDING
}

enum ImageFormat {
  WEBP
  AVIF
  GIF
  PNG
}

type EmoteSearchResult {
  count: Int!
  items: [Emote]!
}

extend type Mutation {
  editEmote(emote_id: ObjectID!, data: EditEmoteInput!): Emote @hasPermissions
}

enum ChannelEmoteListItemAction {
  ADD
  UPDATE
  REMOVE
}

input UserEmoteInput {
  id: String!
  channels: [String!]
  alias: String
}

input EditEmoteInput {
  name: String
  flags: Int
  owner_id: String
  tags: [String!]
}

type Emote {
  id: ObjectID!
  name: String!
  flags: Int!
  status: Int!
  tags: [String!]!
  animated: Boolean!
  created_at: Time!

  owner: User! @goField(forceResolver: true)

  channels(limit: Int, after_id: String!): [User!]!
    @goField(forceResolver: true)
  channel_count: Int! @goField(forceResolver: true)

  links: [[String!]!]!

  reports: [Report!]!
    @goField(forceResolver: true)
    @hasPermissions(role: [ManageReports])
}

extend type Query {
  emote(id: ObjectID!): Emote
  emotes(
    query: String!
    page: Int
    limit: Int
    filter: EmoteFilter
    sort: EmoteSortOrder
  ): [Emote]!
}

enum EmoteFilter {
  GLOBAL
  NORMAL
  ALL
}

enum EmoteSortOrder {
  ASCENDING
  DESCENDING
}

extend type Mutation {
  setChannelEmote(
    user_id: ObjectID!
    target: UserEmoteInput!
    action: ChannelEmoteListItemAction!
  ): User @hasPermissions

  editEmote(emote_id: ObjectID!, data: EditEmoteInput!): Emote @hasPermissions
}

enum ChannelEmoteListItemAction {
  ADD
  UPDATE
  REMOVE
}

input UserEmoteInput {
  id: String!
  channels: [String!]
  alias: String
}

input EditEmoteInput {
  name: String
  flags: Int
  owner_id: String
  tags: [String!]
}

type Role {
  id: ObjectID!
  name: String!
  color: Int!
  allowed: String!
  denied: String!
  position: Int!
  created_at: Time!

  members: [User!]! @goField(forceResolver: true)
}

extend type Query {
  roles: [Role]!
  role(id: ObjectID!): Role
}

extend type Mutation {
  createRole(data: CreateRoleInput!): Role @hasPermissions(role: [ManageRoles])
  editRole(role_id: ObjectID!, data: EditRoleInput!): Role
    @hasPermissions(role: [ManageRoles])
  deleteRole(role_id: ObjectID!): String! @hasPermissions(role: [ManageRoles])
  setUserRole(
    user_id: ObjectID!
    role_id: ObjectID!
    action: UserRoleListItemAction!
  ): User @hasPermissions(role: [ManageUsers])
}

enum UserRoleListItemAction {
  ADD
  UPDATE
  REMOVE
}

input CreateRoleInput {
  name: String!
  color: Int!
  allowed: String!
  denied: String!
}

input EditRoleInput {
  name: String
  color: Int
  allowed: String
  denied: String
  position: Int
}

type Query {
	user(id: String!): User!
	users(
		query: String!
	): [User]!

	### Emotes

	emote(id: String!): Emote
	emotes(
		query: String!,
		page: Int,
		limit: Int,
		sort: Sort
		# providers: [Provider!],
	): [Emote]!

	### Roles

	roles: [Role]!
	role(id: String!): Role

	### Reporting

	reports(
		status: ReportStatus,
		limit: Int,
		after_id: String
		before_id: String
	): [Report]!
	report(id: String!): Report

	### Messaging

	# Get inbox messages
	inbox(after_id: String): [Message]!
	# inboxMessage(id: String!): Message
}

# Sorting cursor, binding a specific order to a value
input Sort {
	value: String!
	order: SortOrder!
}

# The order with which sorting should occur, either ASCENDING or DESCENDING
enum SortOrder {
	ASCENDING
	DESCENDING
}
